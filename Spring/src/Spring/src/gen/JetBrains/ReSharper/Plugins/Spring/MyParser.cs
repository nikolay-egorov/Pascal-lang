//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from V:/Users/Emperor/Desktop/IDE_Dev/Rider_Projects/Pascal-lang/Spring/src/Spring/src/g4\MyParser.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace JetBrains.ReSharper.Plugins.Spring {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class MyParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		AND=1, ARRAY=2, BEGIN=3, BOOLEAN=4, CASE=5, CHAR=6, CHR=7, EXIT=8, CONST=9, 
		DIV=10, DO=11, DOWNTO=12, ELSE=13, OTHERWISE=14, END=15, FILE=16, FOR=17, 
		FORWARD=18, FUNCTION=19, GOTO=20, IF=21, IN=22, INTEGER=23, LABEL=24, 
		MOD=25, NIL=26, NOT=27, OF=28, OR=29, XOR=30, PACKED=31, PROCEDURE=32, 
		REAL=33, RECORD=34, REPEAT=35, SET=36, THEN=37, TO=38, TYPE=39, UNTIL=40, 
		VAR=41, WHILE=42, WITH=43, UNIT=44, INTERFACE=45, USES=46, STRING=47, 
		PASS=48, UNALIGNED=49, PLUS=50, MINUS=51, MULT=52, SLASH=53, ASSIGN=54, 
		COMMA=55, SEMI=56, COLON=57, LSHIFT=58, RSHIFT=59, LSHIFT2=60, RSHIFT2=61, 
		EQUAL=62, NOT_EQUAL=63, LT=64, LE=65, GE=66, GT=67, LPAREN=68, RPAREN=69, 
		LBRACK=70, LBRACK2=71, RBRACK=72, RBRACK2=73, POINTER=74, AT=75, DOT=76, 
		DOTDOT=77, LCURLY=78, RCURLY=79, WS=80, SINGLE_COMMENT=81, COMMENT_1=82, 
		COMMENT_2=83, IDENT=84, STRING_LITERAL=85, NUM_INT=86, NUM_REAL=87;
	public const int
		RULE_fileNode = 0, RULE_expression = 1, RULE_simpleExpression = 2, RULE_term = 3, 
		RULE_factor = 4, RULE_set = 5, RULE_setContainer = 6, RULE_functionDesignator = 7, 
		RULE_parameterList = 8, RULE_actualParameter = 9, RULE_identifier = 10, 
		RULE_label = 11, RULE_unsignedNumber = 12, RULE_unsignedInteger = 13, 
		RULE_unsignedReal = 14, RULE_compoundStatement = 15, RULE_statement = 16, 
		RULE_unlabelledStatement = 17, RULE_structuredStatement = 18, RULE_gotoStatement = 19, 
		RULE_emptyStatement = 20, RULE_simpleStatement = 21, RULE_labeledStatement = 22, 
		RULE_assignmentStatement = 23, RULE_assignmentVariants = 24, RULE_variable = 25, 
		RULE_variableVariants = 26, RULE_statements = 27, RULE_conditionalStatement = 28, 
		RULE_ifStatement = 29, RULE_caseStatement = 30, RULE_caseListElement = 31, 
		RULE_constList = 32, RULE_constant = 33, RULE_constantChr = 34, RULE_unsignedConstant = 35, 
		RULE_repetetiveStatement = 36, RULE_whileStatement = 37, RULE_repeatStatement = 38, 
		RULE_forStatement = 39, RULE_forList = 40, RULE_withStatement = 41, RULE_varList = 42, 
		RULE_initialValue = 43, RULE_finalValue = 44;
	public static readonly string[] ruleNames = {
		"fileNode", "expression", "simpleExpression", "term", "factor", "set", 
		"setContainer", "functionDesignator", "parameterList", "actualParameter", 
		"identifier", "label", "unsignedNumber", "unsignedInteger", "unsignedReal", 
		"compoundStatement", "statement", "unlabelledStatement", "structuredStatement", 
		"gotoStatement", "emptyStatement", "simpleStatement", "labeledStatement", 
		"assignmentStatement", "assignmentVariants", "variable", "variableVariants", 
		"statements", "conditionalStatement", "ifStatement", "caseStatement", 
		"caseListElement", "constList", "constant", "constantChr", "unsignedConstant", 
		"repetetiveStatement", "whileStatement", "repeatStatement", "forStatement", 
		"forList", "withStatement", "varList", "initialValue", "finalValue"
	};

	private static readonly string[] _LiteralNames = {
		null, "'and'", "'array'", "'begin'", "'boolean'", "'case'", "'char'", 
		"'chr'", "'exit'", "'const'", "'div'", "'do'", "'downto'", "'else'", "'otherwise'", 
		"'end'", "'file'", "'for'", "'forward'", "'function'", "'goto'", "'if'", 
		"'in'", "'integer'", "'label'", "'mod'", "'nil'", "'not'", "'of'", "'or'", 
		"'xor'", "'packed'", "'procedure'", "'real'", "'record'", "'repeat'", 
		"'set'", "'then'", "'to'", "'type'", "'until'", "'var'", "'while'", "'with'", 
		"'unit'", "'interface'", "'uses'", "'string'", "'pass'", "'Unaligned'", 
		"'+'", "'-'", "'*'", "'/'", "':='", "','", "';'", "':'", "'<<'", "'>>'", 
		"'shl'", "'shr'", "'='", "'<>'", "'<'", "'<='", "'>='", "'>'", "'('", 
		"')'", "'['", "'(.'", "']'", "'.)'", "'^'", "'@'", "'.'", "'..'", "'{'", 
		"'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "AND", "ARRAY", "BEGIN", "BOOLEAN", "CASE", "CHAR", "CHR", "EXIT", 
		"CONST", "DIV", "DO", "DOWNTO", "ELSE", "OTHERWISE", "END", "FILE", "FOR", 
		"FORWARD", "FUNCTION", "GOTO", "IF", "IN", "INTEGER", "LABEL", "MOD", 
		"NIL", "NOT", "OF", "OR", "XOR", "PACKED", "PROCEDURE", "REAL", "RECORD", 
		"REPEAT", "SET", "THEN", "TO", "TYPE", "UNTIL", "VAR", "WHILE", "WITH", 
		"UNIT", "INTERFACE", "USES", "STRING", "PASS", "UNALIGNED", "PLUS", "MINUS", 
		"MULT", "SLASH", "ASSIGN", "COMMA", "SEMI", "COLON", "LSHIFT", "RSHIFT", 
		"LSHIFT2", "RSHIFT2", "EQUAL", "NOT_EQUAL", "LT", "LE", "GE", "GT", "LPAREN", 
		"RPAREN", "LBRACK", "LBRACK2", "RBRACK", "RBRACK2", "POINTER", "AT", "DOT", 
		"DOTDOT", "LCURLY", "RCURLY", "WS", "SINGLE_COMMENT", "COMMENT_1", "COMMENT_2", 
		"IDENT", "STRING_LITERAL", "NUM_INT", "NUM_REAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MyParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MyParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MyParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileNodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MyParser.Eof, 0); }
		public FileNodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileNode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterFileNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitFileNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileNode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileNodeContext fileNode() {
		FileNodeContext _localctx = new FileNodeContext(Context, State);
		EnterRule(_localctx, 0, RULE_fileNode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			compoundStatement();
			State = 91;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(MyParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(MyParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT_EQUAL() { return GetTokens(MyParser.NOT_EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL(int i) {
			return GetToken(MyParser.NOT_EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LT() { return GetTokens(MyParser.LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT(int i) {
			return GetToken(MyParser.LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LE() { return GetTokens(MyParser.LE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE(int i) {
			return GetToken(MyParser.LE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GE() { return GetTokens(MyParser.GE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE(int i) {
			return GetToken(MyParser.GE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GT() { return GetTokens(MyParser.GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT(int i) {
			return GetToken(MyParser.GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(MyParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(MyParser.IN, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			simpleExpression();
			State = 120;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 115;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						State = 95;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL) {
							{
							State = 94;
							Match(EQUAL);
							}
						}

						}
						break;
					case 2:
						{
						State = 98;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT_EQUAL) {
							{
							State = 97;
							Match(NOT_EQUAL);
							}
						}

						}
						break;
					case 3:
						{
						State = 101;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==LT) {
							{
							State = 100;
							Match(LT);
							}
						}

						}
						break;
					case 4:
						{
						State = 104;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==LE) {
							{
							State = 103;
							Match(LE);
							}
						}

						}
						break;
					case 5:
						{
						State = 107;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==GE) {
							{
							State = 106;
							Match(GE);
							}
						}

						}
						break;
					case 6:
						{
						State = 110;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==GT) {
							{
							State = 109;
							Match(GT);
							}
						}

						}
						break;
					case 7:
						{
						State = 113;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==IN) {
							{
							State = 112;
							Match(IN);
							}
						}

						}
						break;
					}
					State = 117;
					simpleExpression();
					}
					} 
				}
				State = 122;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(MyParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(MyParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MyParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MyParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(MyParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(MyParser.OR, i);
		}
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterSimpleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitSimpleExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_simpleExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			term();
			State = 138;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 133;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						State = 125;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
						case 1:
							{
							State = 124;
							Match(PLUS);
							}
							break;
						}
						}
						break;
					case 2:
						{
						State = 128;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
						case 1:
							{
							State = 127;
							Match(MINUS);
							}
							break;
						}
						}
						break;
					case 3:
						{
						State = 131;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==OR) {
							{
							State = 130;
							Match(OR);
							}
						}

						}
						break;
					}
					State = 135;
					term();
					}
					} 
				}
				State = 140;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PLUS() { return GetTokens(MyParser.PLUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS(int i) {
			return GetToken(MyParser.PLUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MyParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MyParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULT() { return GetTokens(MyParser.MULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT(int i) {
			return GetToken(MyParser.MULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(MyParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(MyParser.SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIV() { return GetTokens(MyParser.DIV); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV(int i) {
			return GetToken(MyParser.DIV, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(MyParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(MyParser.MOD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MyParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MyParser.AND, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 6, RULE_term);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 141;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 144;
			factor();
			State = 168;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 160;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						State = 146;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==MULT) {
							{
							State = 145;
							Match(MULT);
							}
						}

						}
						break;
					case 2:
						{
						State = 149;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==SLASH) {
							{
							State = 148;
							Match(SLASH);
							}
						}

						}
						break;
					case 3:
						{
						State = 152;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==DIV) {
							{
							State = 151;
							Match(DIV);
							}
						}

						}
						break;
					case 4:
						{
						State = 155;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==MOD) {
							{
							State = 154;
							Match(MOD);
							}
						}

						}
						break;
					case 5:
						{
						State = 158;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==AND) {
							{
							State = 157;
							Match(AND);
							}
						}

						}
						break;
					}
					State = 163;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==PLUS || _la==MINUS) {
						{
						State = 162;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 165;
					factor();
					}
					} 
				}
				State = 170;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDesignatorContext functionDesignator() {
			return GetRuleContext<FunctionDesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedConstantContext unsignedConstant() {
			return GetRuleContext<UnsignedConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MyParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 8, RULE_factor);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 171;
				variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172;
				functionDesignator();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 173;
				Match(LPAREN);
				State = 174;
				expression();
				State = 175;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 177;
				unsignedConstant();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 178;
				set();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 179;
				Match(NOT);
				State = 180;
				factor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(MyParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(MyParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetContainerContext[] setContainer() {
			return GetRuleContexts<SetContainerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetContainerContext setContainer(int i) {
			return GetRuleContext<SetContainerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK2() { return GetToken(MyParser.LBRACK2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK2() { return GetToken(MyParser.RBRACK2, 0); }
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 10, RULE_set);
		int _la;
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183;
				Match(LBRACK);
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHR) | (1L << NIL) | (1L << NOT) | (1L << UNALIGNED) | (1L << PLUS) | (1L << MINUS))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LPAREN - 68)) | (1L << (LBRACK - 68)) | (1L << (LBRACK2 - 68)) | (1L << (AT - 68)) | (1L << (IDENT - 68)) | (1L << (STRING_LITERAL - 68)) | (1L << (NUM_INT - 68)) | (1L << (NUM_REAL - 68)))) != 0)) {
					{
					State = 184;
					setContainer();
					State = 189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 185;
						Match(COMMA);
						State = 186;
						setContainer();
						}
						}
						State = 191;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 194;
				Match(RBRACK);
				}
				break;
			case LBRACK2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				Match(LBRACK2);
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHR) | (1L << NIL) | (1L << NOT) | (1L << UNALIGNED) | (1L << PLUS) | (1L << MINUS))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LPAREN - 68)) | (1L << (LBRACK - 68)) | (1L << (LBRACK2 - 68)) | (1L << (AT - 68)) | (1L << (IDENT - 68)) | (1L << (STRING_LITERAL - 68)) | (1L << (NUM_INT - 68)) | (1L << (NUM_REAL - 68)))) != 0)) {
					{
					State = 196;
					setContainer();
					State = 201;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 197;
						Match(COMMA);
						State = 198;
						setContainer();
						}
						}
						State = 203;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 206;
				Match(RBRACK2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContainerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOT() { return GetToken(MyParser.DOTDOT, 0); }
		public SetContainerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setContainer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterSetContainer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitSetContainer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetContainer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContainerContext setContainer() {
		SetContainerContext _localctx = new SetContainerContext(Context, State);
		EnterRule(_localctx, 12, RULE_setContainer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			expression();
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOTDOT) {
				{
				State = 210;
				Match(DOTDOT);
				State = 211;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNALIGNED() { return GetToken(MyParser.UNALIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionDesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDesignator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterFunctionDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitFunctionDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDesignatorContext functionDesignator() {
		FunctionDesignatorContext _localctx = new FunctionDesignatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionDesignator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				{
				State = 214;
				identifier();
				}
				break;
			case UNALIGNED:
				{
				State = 215;
				Match(UNALIGNED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 218;
			Match(LPAREN);
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHR) | (1L << NIL) | (1L << NOT) | (1L << UNALIGNED) | (1L << PLUS) | (1L << MINUS))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (LPAREN - 68)) | (1L << (LBRACK - 68)) | (1L << (LBRACK2 - 68)) | (1L << (AT - 68)) | (1L << (IDENT - 68)) | (1L << (STRING_LITERAL - 68)) | (1L << (NUM_INT - 68)) | (1L << (NUM_REAL - 68)))) != 0)) {
				{
				State = 219;
				parameterList();
				}
			}

			State = 222;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ActualParameterContext[] actualParameter() {
			return GetRuleContexts<ActualParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActualParameterContext actualParameter(int i) {
			return GetRuleContext<ActualParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 16, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			actualParameter();
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 225;
				Match(COMMA);
				State = 226;
				actualParameter();
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedIntegerContext unsignedInteger() {
			return GetRuleContext<UnsignedIntegerContext>(0);
		}
		public ActualParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actualParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterActualParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitActualParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualParameterContext actualParameter() {
		ActualParameterContext _localctx = new ActualParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_actualParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			expression();
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 233;
				Match(COLON);
				State = 234;
				unsignedInteger();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(MyParser.IDENT, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedIntegerContext unsignedInteger() {
			return GetRuleContext<UnsignedIntegerContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 22, RULE_label);
		try {
			State = 241;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239;
				identifier();
				}
				break;
			case NUM_INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240;
				unsignedInteger();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedIntegerContext unsignedInteger() {
			return GetRuleContext<UnsignedIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedRealContext unsignedReal() {
			return GetRuleContext<UnsignedRealContext>(0);
		}
		public UnsignedNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterUnsignedNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitUnsignedNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedNumberContext unsignedNumber() {
		UnsignedNumberContext _localctx = new UnsignedNumberContext(Context, State);
		EnterRule(_localctx, 24, RULE_unsignedNumber);
		try {
			State = 245;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM_INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				unsignedInteger();
				}
				break;
			case NUM_REAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244;
				unsignedReal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedIntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_INT() { return GetToken(MyParser.NUM_INT, 0); }
		public UnsignedIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterUnsignedInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitUnsignedInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedIntegerContext unsignedInteger() {
		UnsignedIntegerContext _localctx = new UnsignedIntegerContext(Context, State);
		EnterRule(_localctx, 26, RULE_unsignedInteger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(NUM_INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedRealContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM_REAL() { return GetToken(MyParser.NUM_REAL, 0); }
		public UnsignedRealContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedReal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterUnsignedReal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitUnsignedReal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedReal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedRealContext unsignedReal() {
		UnsignedRealContext _localctx = new UnsignedRealContext(Context, State);
		EnterRule(_localctx, 28, RULE_unsignedReal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(NUM_REAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MyParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MyParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MyParser.SEMI, 0); }
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(BEGIN);
			State = 252;
			statements();
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 253;
				Match(SEMI);
				}
			}

			State = 256;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnlabelledStatementContext unlabelledStatement() {
			return GetRuleContext<UnlabelledStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_statement);
		try {
			State = 263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258;
				label();
				State = 259;
				Match(COLON);
				State = 260;
				unlabelledStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 262;
				unlabelledStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlabelledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructuredStatementContext structuredStatement() {
			return GetRuleContext<StructuredStatementContext>(0);
		}
		public UnlabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlabelledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterUnlabelledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitUnlabelledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlabelledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlabelledStatementContext unlabelledStatement() {
		UnlabelledStatementContext _localctx = new UnlabelledStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_unlabelledStatement);
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELSE:
			case OTHERWISE:
			case END:
			case GOTO:
			case LABEL:
			case UNTIL:
			case PASS:
			case UNALIGNED:
			case SEMI:
			case AT:
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 265;
				simpleStatement();
				}
				break;
			case BEGIN:
			case CASE:
			case FOR:
			case IF:
			case REPEAT:
			case WHILE:
			case WITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266;
				structuredStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructuredStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalStatementContext conditionalStatement() {
			return GetRuleContext<ConditionalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepetetiveStatementContext repetetiveStatement() {
			return GetRuleContext<RepetetiveStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithStatementContext withStatement() {
			return GetRuleContext<WithStatementContext>(0);
		}
		public StructuredStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structuredStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterStructuredStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitStructuredStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructuredStatementContext structuredStatement() {
		StructuredStatementContext _localctx = new StructuredStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_structuredStatement);
		try {
			State = 273;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEGIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 269;
				compoundStatement();
				}
				break;
			case CASE:
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 270;
				conditionalStatement();
				}
				break;
			case FOR:
			case REPEAT:
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 271;
				repetetiveStatement();
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 272;
				withStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(MyParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_gotoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			Match(GOTO);
			State = 276;
			label();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDesignatorContext functionDesignator() {
			return GetRuleContext<FunctionDesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASS() { return GetToken(MyParser.PASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_simpleStatement);
		try {
			State = 287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280;
				assignmentStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281;
				functionDesignator();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 282;
				labeledStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 283;
				gotoStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 284;
				identifier();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 285;
				Match(PASS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 286;
				emptyStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(MyParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext[] label() {
			return GetRuleContexts<LabelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label(int i) {
			return GetRuleContext<LabelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyParser.COMMA, i);
		}
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_labeledStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(LABEL);
			State = 290;
			label();
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 291;
				Match(COMMA);
				State = 292;
				label();
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentVariantsContext assignmentVariants() {
			return GetRuleContext<AssignmentVariantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(MyParser.EQUAL, 0); }
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_assignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			variable();
			State = 303;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 299;
				Match(ASSIGN);
				}
				break;
			case PLUS:
			case MINUS:
			case MULT:
			case SLASH:
				{
				{
				State = 300;
				assignmentVariants();
				State = 301;
				Match(EQUAL);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 305;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentVariantsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MyParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MyParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(MyParser.MULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(MyParser.SLASH, 0); }
		public AssignmentVariantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentVariants; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterAssignmentVariants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitAssignmentVariants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentVariants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentVariantsContext assignmentVariants() {
		AssignmentVariantsContext _localctx = new AssignmentVariantsContext(Context, State);
		EnterRule(_localctx, 48, RULE_assignmentVariants);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << MULT) | (1L << SLASH))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableVariantsContext variableVariants() {
			return GetRuleContext<VariableVariantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK() { return GetTokens(MyParser.LBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK(int i) {
			return GetToken(MyParser.LBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK() { return GetTokens(MyParser.RBRACK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK(int i) {
			return GetToken(MyParser.RBRACK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACK2() { return GetTokens(MyParser.LBRACK2); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK2(int i) {
			return GetToken(MyParser.LBRACK2, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACK2() { return GetTokens(MyParser.RBRACK2); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK2(int i) {
			return GetToken(MyParser.RBRACK2, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MyParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MyParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] POINTER() { return GetTokens(MyParser.POINTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTER(int i) {
			return GetToken(MyParser.POINTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyParser.COMMA, i);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 50, RULE_variable);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			variableVariants();
			State = 337;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 335;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LBRACK:
						{
						State = 310;
						Match(LBRACK);
						State = 311;
						expression();
						State = 316;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 312;
							Match(COMMA);
							State = 313;
							expression();
							}
							}
							State = 318;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 319;
						Match(RBRACK);
						}
						break;
					case LBRACK2:
						{
						State = 321;
						Match(LBRACK2);
						State = 322;
						expression();
						State = 327;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 323;
							Match(COMMA);
							State = 324;
							expression();
							}
							}
							State = 329;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 330;
						Match(RBRACK2);
						}
						break;
					case DOT:
						{
						State = 332;
						Match(DOT);
						State = 333;
						identifier();
						}
						break;
					case POINTER:
						{
						State = 334;
						Match(POINTER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 339;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableVariantsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(MyParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDesignatorContext functionDesignator() {
			return GetRuleContext<FunctionDesignatorContext>(0);
		}
		public VariableVariantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableVariants; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterVariableVariants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitVariableVariants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableVariants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableVariantsContext variableVariants() {
		VariableVariantsContext _localctx = new VariableVariantsContext(Context, State);
		EnterRule(_localctx, 52, RULE_variableVariants);
		try {
			State = 346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 340;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 341;
				Match(AT);
				State = 342;
				expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 343;
				Match(AT);
				State = 344;
				identifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 345;
				functionDesignator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(MyParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(MyParser.SEMI, i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 54, RULE_statements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			statement();
			State = 353;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 349;
					Match(SEMI);
					State = 350;
					statement();
					}
					} 
				}
				State = 355;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		public ConditionalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterConditionalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitConditionalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalStatementContext conditionalStatement() {
		ConditionalStatementContext _localctx = new ConditionalStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_conditionalStatement);
		try {
			State = 358;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 356;
				ifStatement();
				}
				break;
			case CASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 357;
				caseStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MyParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MyParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MyParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 58, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			Match(IF);
			State = 361;
			expression();
			State = 362;
			Match(THEN);
			State = 363;
			statement();
			State = 366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 364;
				Match(ELSE);
				State = 365;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MyParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(MyParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseListElementContext[] caseListElement() {
			return GetRuleContexts<CaseListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseListElementContext caseListElement(int i) {
			return GetRuleContext<CaseListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MyParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(MyParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(MyParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MyParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERWISE() { return GetToken(MyParser.OTHERWISE, 0); }
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			Match(CASE);
			State = 369;
			expression();
			State = 370;
			Match(OF);
			State = 371;
			caseListElement();
			State = 376;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 372;
					Match(SEMI);
					State = 373;
					caseListElement();
					}
					} 
				}
				State = 378;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 379;
				Match(SEMI);
				}
			}

			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE || _la==OTHERWISE) {
				{
				State = 382;
				_la = TokenStream.LA(1);
				if ( !(_la==ELSE || _la==OTHERWISE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 383;
				statements();
				}
			}

			State = 386;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseListElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstListContext constList() {
			return GetRuleContext<ConstListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(MyParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public CaseListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterCaseListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitCaseListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseListElementContext caseListElement() {
		CaseListElementContext _localctx = new CaseListElementContext(Context, State);
		EnterRule(_localctx, 62, RULE_caseListElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			constList();
			State = 389;
			Match(COLON);
			State = 390;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOTDOT() { return GetTokens(MyParser.DOTDOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTDOT(int i) {
			return GetToken(MyParser.DOTDOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyParser.COMMA, i);
		}
		public ConstListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterConstList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitConstList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstListContext constList() {
		ConstListContext _localctx = new ConstListContext(Context, State);
		EnterRule(_localctx, 64, RULE_constList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			constant();
			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOTDOT) {
				{
				State = 393;
				Match(DOTDOT);
				State = 394;
				constant();
				}
			}

			State = 405;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 397;
				Match(COMMA);
				State = 398;
				constant();
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOTDOT) {
					{
					State = 399;
					Match(DOTDOT);
					State = 400;
					constant();
					}
				}

				}
				}
				State = 407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedNumberContext unsignedNumber() {
			return GetRuleContext<UnsignedNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MyParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantChrContext constantChr() {
			return GetRuleContext<ConstantChrContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 66, RULE_constant);
		try {
			State = 412;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM_INT:
			case NUM_REAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 408;
				unsignedNumber();
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 409;
				identifier();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 410;
				Match(STRING_LITERAL);
				}
				break;
			case CHR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 411;
				constantChr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantChrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHR() { return GetToken(MyParser.CHR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(MyParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(MyParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedIntegerContext unsignedInteger() {
			return GetRuleContext<UnsignedIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstantChrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantChr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterConstantChr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitConstantChr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantChr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantChrContext constantChr() {
		ConstantChrContext _localctx = new ConstantChrContext(Context, State);
		EnterRule(_localctx, 68, RULE_constantChr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			Match(CHR);
			State = 415;
			Match(LPAREN);
			State = 418;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM_INT:
				{
				State = 416;
				unsignedInteger();
				}
				break;
			case IDENT:
				{
				State = 417;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 420;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnsignedConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnsignedNumberContext unsignedNumber() {
			return GetRuleContext<UnsignedNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantChrContext constantChr() {
			return GetRuleContext<ConstantChrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MyParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL() { return GetToken(MyParser.NIL, 0); }
		public UnsignedConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsignedConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterUnsignedConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitUnsignedConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnsignedConstantContext unsignedConstant() {
		UnsignedConstantContext _localctx = new UnsignedConstantContext(Context, State);
		EnterRule(_localctx, 70, RULE_unsignedConstant);
		try {
			State = 426;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM_INT:
			case NUM_REAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 422;
				unsignedNumber();
				}
				break;
			case CHR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 423;
				constantChr();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 424;
				Match(STRING_LITERAL);
				}
				break;
			case NIL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 425;
				Match(NIL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepetetiveStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public RepetetiveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repetetiveStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterRepetetiveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitRepetetiveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepetetiveStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepetetiveStatementContext repetetiveStatement() {
		RepetetiveStatementContext _localctx = new RepetetiveStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_repetetiveStatement);
		try {
			State = 431;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 428;
				whileStatement();
				}
				break;
			case REPEAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 429;
				repeatStatement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 430;
				forStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MyParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MyParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			Match(WHILE);
			State = 434;
			expression();
			State = 435;
			Match(DO);
			State = 436;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(MyParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(MyParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			Match(REPEAT);
			State = 439;
			statements();
			State = 440;
			Match(UNTIL);
			State = 441;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MyParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MyParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForListContext forList() {
			return GetRuleContext<ForListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MyParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MyParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_forStatement);
		try {
			State = 457;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 443;
				Match(FOR);
				State = 444;
				identifier();
				State = 445;
				Match(ASSIGN);
				State = 446;
				forList();
				State = 447;
				Match(DO);
				State = 448;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 450;
				Match(FOR);
				State = 451;
				identifier();
				State = 452;
				Match(IN);
				State = 453;
				expression();
				State = 454;
				Match(DO);
				State = 455;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitialValueContext initialValue() {
			return GetRuleContext<InitialValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinalValueContext finalValue() {
			return GetRuleContext<FinalValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MyParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOWNTO() { return GetToken(MyParser.DOWNTO, 0); }
		public ForListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterForList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitForList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForListContext forList() {
		ForListContext _localctx = new ForListContext(Context, State);
		EnterRule(_localctx, 80, RULE_forList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			initialValue();
			State = 460;
			_la = TokenStream.LA(1);
			if ( !(_la==DOWNTO || _la==TO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 461;
			finalValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MyParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarListContext varList() {
			return GetRuleContext<VarListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MyParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitWithStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStatementContext withStatement() {
		WithStatementContext _localctx = new WithStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_withStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			Match(WITH);
			State = 464;
			varList();
			State = 465;
			Match(DO);
			State = 466;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MyParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MyParser.COMMA, i);
		}
		public VarListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterVarList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitVarList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarListContext varList() {
		VarListContext _localctx = new VarListContext(Context, State);
		EnterRule(_localctx, 84, RULE_varList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			variable();
			State = 473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 469;
				Match(COMMA);
				State = 470;
				variable();
				}
				}
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitialValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterInitialValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitInitialValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitialValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitialValueContext initialValue() {
		InitialValueContext _localctx = new InitialValueContext(Context, State);
		EnterRule(_localctx, 86, RULE_initialValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinalValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FinalValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterFinalValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitFinalValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinalValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinalValueContext finalValue() {
		FinalValueContext _localctx = new FinalValueContext(Context, State);
		EnterRule(_localctx, 88, RULE_finalValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'Y', '\x1E3', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x62', 
		'\n', '\x3', '\x3', '\x3', '\x5', '\x3', '\x65', '\n', '\x3', '\x3', '\x3', 
		'\x5', '\x3', 'h', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 'k', '\n', 
		'\x3', '\x3', '\x3', '\x5', '\x3', 'n', '\n', '\x3', '\x3', '\x3', '\x5', 
		'\x3', 'q', '\n', '\x3', '\x3', '\x3', '\x5', '\x3', 't', '\n', '\x3', 
		'\x5', '\x3', 'v', '\n', '\x3', '\x3', '\x3', '\a', '\x3', 'y', '\n', 
		'\x3', '\f', '\x3', '\xE', '\x3', '|', '\v', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x80', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\x83', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', '\x86', '\n', '\x4', 
		'\x5', '\x4', '\x88', '\n', '\x4', '\x3', '\x4', '\a', '\x4', '\x8B', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x8E', '\v', '\x4', '\x3', '\x5', 
		'\x5', '\x5', '\x91', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x95', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', '\x98', '\n', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\x9B', '\n', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x9E', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', '\xA1', 
		'\n', '\x5', '\x5', '\x5', '\xA3', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\xA6', '\n', '\x5', '\x3', '\x5', '\a', '\x5', '\xA9', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', '\xAC', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xB8', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'\xBE', '\n', '\a', '\f', '\a', '\xE', '\a', '\xC1', '\v', '\a', '\x5', 
		'\a', '\xC3', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\a', '\a', '\xCA', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\xCD', '\v', '\a', '\x5', '\a', '\xCF', '\n', '\a', '\x3', '\a', 
		'\x5', '\a', '\xD2', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '\xD7', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\xDB', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xDF', '\n', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\a', '\n', '\xE6', '\n', '\n', '\f', '\n', '\xE', '\n', '\xE9', '\v', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xEE', '\n', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\xF4', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xF8', 
		'\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x101', '\n', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x10A', '\n', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x10E', '\n', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x114', 
		'\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x122', '\n', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', 
		'\x18', '\x128', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x12B', '\v', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\x132', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\x13D', '\n', '\x1B', '\f', 
		'\x1B', '\xE', '\x1B', '\x140', '\v', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', 
		'\x148', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x14B', '\v', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\a', '\x1B', '\x152', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x155', 
		'\v', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x15D', '\n', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x162', '\n', '\x1D', 
		'\f', '\x1D', '\xE', '\x1D', '\x165', '\v', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x169', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', 
		'\x171', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\a', ' ', '\x179', '\n', ' ', '\f', ' ', '\xE', 
		' ', '\x17C', '\v', ' ', '\x3', ' ', '\x5', ' ', '\x17F', '\n', ' ', '\x3', 
		' ', '\x3', ' ', '\x5', ' ', '\x183', '\n', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x5', '\"', '\x18E', '\n', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x5', '\"', '\x194', '\n', '\"', '\a', '\"', 
		'\x196', '\n', '\"', '\f', '\"', '\xE', '\"', '\x199', '\v', '\"', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x19F', '\n', '#', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x1A5', '\n', 
		'$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x5', '%', '\x1AD', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x5', '&', '\x1B2', '\n', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x1CC', '\n', ')', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\a', 
		',', '\x1DA', '\n', ',', '\f', ',', '\xE', ',', '\x1DD', '\v', ',', '\x3', 
		'-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x2', '\x2', '/', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', 
		'\x2', '\x6', '\x3', '\x2', '\x34', '\x35', '\x3', '\x2', '\x34', '\x37', 
		'\x3', '\x2', '\xF', '\x10', '\x4', '\x2', '\xE', '\xE', '(', '(', '\x2', 
		'\x211', '\x2', '\\', '\x3', '\x2', '\x2', '\x2', '\x4', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '}', '\x3', '\x2', '\x2', '\x2', '\b', '\x90', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\xB7', '\x3', '\x2', '\x2', '\x2', '\f', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xDA', '\x3', '\x2', '\x2', '\x2', '\x12', '\xE2', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xEA', '\x3', '\x2', '\x2', '\x2', '\x16', '\xEF', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xFB', '\x3', '\x2', '\x2', '\x2', ' ', '\xFD', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x10D', '\x3', '\x2', '\x2', '\x2', '&', '\x113', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x115', '\x3', '\x2', '\x2', '\x2', '*', '\x118', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x123', '\x3', '\x2', '\x2', '\x2', '\x30', '\x12C', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x135', '\x3', '\x2', '\x2', '\x2', '\x34', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x15C', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x15E', '\x3', '\x2', '\x2', '\x2', ':', '\x168', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x16A', '\x3', '\x2', '\x2', '\x2', '>', '\x172', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x186', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x44', '\x19E', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x1A0', '\x3', '\x2', '\x2', '\x2', 'H', '\x1AC', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x1B3', '\x3', '\x2', '\x2', '\x2', 'N', '\x1B8', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x1CB', '\x3', '\x2', '\x2', '\x2', 'R', '\x1CD', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x1D1', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x1D6', '\x3', '\x2', '\x2', '\x2', 'X', '\x1DE', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x5', 
		' ', '\x11', '\x2', ']', '^', '\a', '\x2', '\x2', '\x3', '^', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '_', 'z', '\x5', '\x6', '\x4', '\x2', '`', '\x62', 
		'\a', '@', '\x2', '\x2', '\x61', '`', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', 'v', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x65', '\a', '\x41', '\x2', '\x2', '\x64', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'v', '\x3', '\x2', '\x2', '\x2', '\x66', 'h', '\a', '\x42', '\x2', '\x2', 
		'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'v', '\x3', '\x2', '\x2', '\x2', 'i', 'k', '\a', '\x43', '\x2', 
		'\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'v', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\a', '\x44', '\x2', 
		'\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'v', '\x3', '\x2', '\x2', '\x2', 'o', 'q', '\a', '\x45', '\x2', 
		'\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'v', '\x3', '\x2', '\x2', '\x2', 'r', 't', '\a', '\x18', '\x2', 
		'\x2', 's', 'r', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', 
		'\x2', 't', 'v', '\x3', '\x2', '\x2', '\x2', 'u', '\x61', '\x3', '\x2', 
		'\x2', '\x2', 'u', '\x64', '\x3', '\x2', '\x2', '\x2', 'u', 'g', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'j', '\x3', '\x2', '\x2', '\x2', 'u', 'm', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'p', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'y', '\x5', 
		'\x6', '\x4', '\x2', 'x', 'u', '\x3', '\x2', '\x2', '\x2', 'y', '|', '\x3', 
		'\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', 
		'\x2', '\x2', '\x2', '{', '\x5', '\x3', '\x2', '\x2', '\x2', '|', 'z', 
		'\x3', '\x2', '\x2', '\x2', '}', '\x8C', '\x5', '\b', '\x5', '\x2', '~', 
		'\x80', '\a', '\x34', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x83', '\a', '\x35', '\x2', '\x2', '\x82', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x88', '\x3', '\x2', '\x2', '\x2', '\x84', '\x86', '\a', 
		'\x1F', '\x2', '\x2', '\x85', '\x84', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x86', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x87', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8B', '\x5', '\b', '\x5', 
		'\x2', '\x8A', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x91', '\t', 
		'\x2', '\x2', '\x2', '\x90', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\xAA', '\x5', '\n', '\x6', '\x2', '\x93', '\x95', '\a', 
		'\x36', '\x2', '\x2', '\x94', '\x93', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x95', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x98', '\a', '\x37', '\x2', '\x2', '\x97', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9B', '\a', '\f', '\x2', 
		'\x2', '\x9A', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9E', '\a', '\x1B', '\x2', '\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA1', '\a', '\x3', '\x2', '\x2', '\xA0', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\x97', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA6', '\t', '\x2', '\x2', '\x2', '\xA5', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA9', '\x5', 
		'\n', '\x6', '\x2', '\xA8', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xB8', '\x5', '\x34', '\x1B', '\x2', '\xAE', '\xB8', '\x5', '\x10', '\t', 
		'\x2', '\xAF', '\xB0', '\a', '\x46', '\x2', '\x2', '\xB0', '\xB1', '\x5', 
		'\x4', '\x3', '\x2', '\xB1', '\xB2', '\a', 'G', '\x2', '\x2', '\xB2', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB8', '\x5', 'H', '%', '\x2', 
		'\xB4', '\xB8', '\x5', '\f', '\a', '\x2', '\xB5', '\xB6', '\a', '\x1D', 
		'\x2', '\x2', '\xB6', '\xB8', '\x5', '\n', '\x6', '\x2', '\xB7', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\xB7', '\xAE', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\xB7', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\xB9', '\xC2', '\a', 'H', '\x2', '\x2', '\xBA', '\xBF', '\x5', '\xE', 
		'\b', '\x2', '\xBB', '\xBC', '\a', '\x39', '\x2', '\x2', '\xBC', '\xBE', 
		'\x5', '\xE', '\b', '\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xD2', 
		'\a', 'J', '\x2', '\x2', '\xC5', '\xCE', '\a', 'I', '\x2', '\x2', '\xC6', 
		'\xCB', '\x5', '\xE', '\b', '\x2', '\xC7', '\xC8', '\a', '\x39', '\x2', 
		'\x2', '\xC8', '\xCA', '\x5', '\xE', '\b', '\x2', '\xC9', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xD2', '\a', 'K', '\x2', '\x2', '\xD1', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD6', '\x5', '\x4', '\x3', 
		'\x2', '\xD4', '\xD5', '\a', 'O', '\x2', '\x2', '\xD5', '\xD7', '\x5', 
		'\x4', '\x3', '\x2', '\xD6', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xDB', '\x5', '\x16', '\f', '\x2', '\xD9', '\xDB', '\a', 
		'\x33', '\x2', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xDE', '\a', '\x46', '\x2', '\x2', '\xDD', '\xDF', '\x5', 
		'\x12', '\n', '\x2', '\xDE', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xE1', '\a', 'G', '\x2', '\x2', '\xE1', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE7', '\x5', '\x14', '\v', '\x2', '\xE3', 
		'\xE4', '\a', '\x39', '\x2', '\x2', '\xE4', '\xE6', '\x5', '\x14', '\v', 
		'\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xED', '\x5', 
		'\x4', '\x3', '\x2', '\xEB', '\xEC', '\a', ';', '\x2', '\x2', '\xEC', 
		'\xEE', '\x5', '\x1C', '\xF', '\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xF0', '\a', 'V', '\x2', '\x2', '\xF0', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF4', '\x5', '\x16', '\f', 
		'\x2', '\xF2', '\xF4', '\x5', '\x1C', '\xF', '\x2', '\xF3', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF8', '\x5', '\x1C', '\xF', 
		'\x2', '\xF6', '\xF8', '\x5', '\x1E', '\x10', '\x2', '\xF7', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\a', 'X', '\x2', 
		'\x2', '\xFA', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\a', 
		'Y', '\x2', '\x2', '\xFC', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFE', '\a', '\x5', '\x2', '\x2', '\xFE', '\x100', '\x5', '\x38', '\x1D', 
		'\x2', '\xFF', '\x101', '\a', ':', '\x2', '\x2', '\x100', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x101', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\a', '\x11', '\x2', 
		'\x2', '\x103', '!', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x5', 
		'\x18', '\r', '\x2', '\x105', '\x106', '\a', ';', '\x2', '\x2', '\x106', 
		'\x107', '\x5', '$', '\x13', '\x2', '\x107', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x10A', '\x5', '$', '\x13', '\x2', '\x109', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '#', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10E', '\x5', ',', 
		'\x17', '\x2', '\x10C', '\x10E', '\x5', '&', '\x14', '\x2', '\x10D', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '%', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x114', '\x5', ' ', 
		'\x11', '\x2', '\x110', '\x114', '\x5', ':', '\x1E', '\x2', '\x111', '\x114', 
		'\x5', 'J', '&', '\x2', '\x112', '\x114', '\x5', 'T', '+', '\x2', '\x113', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\x113', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', '\x113', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x116', '\a', '\x16', '\x2', '\x2', '\x116', '\x117', '\x5', 
		'\x18', '\r', '\x2', '\x117', ')', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '\x119', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x122', '\x5', '\x30', '\x19', '\x2', '\x11B', '\x122', 
		'\x5', '\x10', '\t', '\x2', '\x11C', '\x122', '\x5', '.', '\x18', '\x2', 
		'\x11D', '\x122', '\x5', '(', '\x15', '\x2', '\x11E', '\x122', '\x5', 
		'\x16', '\f', '\x2', '\x11F', '\x122', '\a', '\x32', '\x2', '\x2', '\x120', 
		'\x122', '\x5', '*', '\x16', '\x2', '\x121', '\x11A', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x121', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x121', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x120', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\a', '\x1A', '\x2', 
		'\x2', '\x124', '\x129', '\x5', '\x18', '\r', '\x2', '\x125', '\x126', 
		'\a', '\x39', '\x2', '\x2', '\x126', '\x128', '\x5', '\x18', '\r', '\x2', 
		'\x127', '\x125', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12B', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x127', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x131', 
		'\x5', '\x34', '\x1B', '\x2', '\x12D', '\x132', '\a', '\x38', '\x2', '\x2', 
		'\x12E', '\x12F', '\x5', '\x32', '\x1A', '\x2', '\x12F', '\x130', '\a', 
		'@', '\x2', '\x2', '\x130', '\x132', '\x3', '\x2', '\x2', '\x2', '\x131', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', '\x131', '\x12E', '\x3', '\x2', '\x2', 
		'\x2', '\x132', '\x133', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', 
		'\x5', '\x4', '\x3', '\x2', '\x134', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x135', '\x136', '\t', '\x3', '\x2', '\x2', '\x136', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x137', '\x153', '\x5', '\x36', '\x1C', '\x2', '\x138', 
		'\x139', '\a', 'H', '\x2', '\x2', '\x139', '\x13E', '\x5', '\x4', '\x3', 
		'\x2', '\x13A', '\x13B', '\a', '\x39', '\x2', '\x2', '\x13B', '\x13D', 
		'\x5', '\x4', '\x3', '\x2', '\x13C', '\x13A', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '\x140', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13C', '\x3', 
		'\x2', '\x2', '\x2', '\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13F', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x140', '\x13E', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x142', '\a', 'J', '\x2', '\x2', '\x142', '\x152', '\x3', 
		'\x2', '\x2', '\x2', '\x143', '\x144', '\a', 'I', '\x2', '\x2', '\x144', 
		'\x149', '\x5', '\x4', '\x3', '\x2', '\x145', '\x146', '\a', '\x39', '\x2', 
		'\x2', '\x146', '\x148', '\x5', '\x4', '\x3', '\x2', '\x147', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\x148', '\x14B', '\x3', '\x2', '\x2', '\x2', 
		'\x149', '\x147', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\x3', 
		'\x2', '\x2', '\x2', '\x14A', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\a', 'K', '\x2', 
		'\x2', '\x14D', '\x152', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', 
		'\a', 'N', '\x2', '\x2', '\x14F', '\x152', '\x5', '\x16', '\f', '\x2', 
		'\x150', '\x152', '\a', 'L', '\x2', '\x2', '\x151', '\x138', '\x3', '\x2', 
		'\x2', '\x2', '\x151', '\x143', '\x3', '\x2', '\x2', '\x2', '\x151', '\x14E', 
		'\x3', '\x2', '\x2', '\x2', '\x151', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\x155', '\x3', '\x2', '\x2', '\x2', '\x153', '\x151', '\x3', 
		'\x2', '\x2', '\x2', '\x153', '\x154', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x155', '\x153', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x15D', '\x5', '\x16', '\f', '\x2', '\x157', '\x158', 
		'\a', 'M', '\x2', '\x2', '\x158', '\x15D', '\x5', '\x4', '\x3', '\x2', 
		'\x159', '\x15A', '\a', 'M', '\x2', '\x2', '\x15A', '\x15D', '\x5', '\x16', 
		'\f', '\x2', '\x15B', '\x15D', '\x5', '\x10', '\t', '\x2', '\x15C', '\x156', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x157', '\x3', '\x2', '\x2', '\x2', 
		'\x15C', '\x159', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15B', '\x3', 
		'\x2', '\x2', '\x2', '\x15D', '\x37', '\x3', '\x2', '\x2', '\x2', '\x15E', 
		'\x163', '\x5', '\"', '\x12', '\x2', '\x15F', '\x160', '\a', ':', '\x2', 
		'\x2', '\x160', '\x162', '\x5', '\"', '\x12', '\x2', '\x161', '\x15F', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x165', '\x3', '\x2', '\x2', '\x2', 
		'\x163', '\x161', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\x39', '\x3', '\x2', '\x2', '\x2', '\x165', 
		'\x163', '\x3', '\x2', '\x2', '\x2', '\x166', '\x169', '\x5', '<', '\x1F', 
		'\x2', '\x167', '\x169', '\x5', '>', ' ', '\x2', '\x168', '\x166', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\x167', '\x3', '\x2', '\x2', '\x2', '\x169', 
		';', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x16B', '\a', '\x17', '\x2', 
		'\x2', '\x16B', '\x16C', '\x5', '\x4', '\x3', '\x2', '\x16C', '\x16D', 
		'\a', '\'', '\x2', '\x2', '\x16D', '\x170', '\x5', '\"', '\x12', '\x2', 
		'\x16E', '\x16F', '\a', '\xF', '\x2', '\x2', '\x16F', '\x171', '\x5', 
		'\"', '\x12', '\x2', '\x170', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'\x171', '\x3', '\x2', '\x2', '\x2', '\x171', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x172', '\x173', '\a', '\a', '\x2', '\x2', '\x173', '\x174', '\x5', 
		'\x4', '\x3', '\x2', '\x174', '\x175', '\a', '\x1E', '\x2', '\x2', '\x175', 
		'\x17A', '\x5', '@', '!', '\x2', '\x176', '\x177', '\a', ':', '\x2', '\x2', 
		'\x177', '\x179', '\x5', '@', '!', '\x2', '\x178', '\x176', '\x3', '\x2', 
		'\x2', '\x2', '\x179', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x178', 
		'\x3', '\x2', '\x2', '\x2', '\x17A', '\x17B', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x17D', '\x17F', '\a', ':', '\x2', '\x2', '\x17E', 
		'\x17D', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\x3', '\x2', '\x2', 
		'\x2', '\x17F', '\x182', '\x3', '\x2', '\x2', '\x2', '\x180', '\x181', 
		'\t', '\x4', '\x2', '\x2', '\x181', '\x183', '\x5', '\x38', '\x1D', '\x2', 
		'\x182', '\x180', '\x3', '\x2', '\x2', '\x2', '\x182', '\x183', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x184', '\x3', '\x2', '\x2', '\x2', '\x184', 
		'\x185', '\a', '\x11', '\x2', '\x2', '\x185', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x186', '\x187', '\x5', '\x42', '\"', '\x2', '\x187', '\x188', 
		'\a', ';', '\x2', '\x2', '\x188', '\x189', '\x5', '\"', '\x12', '\x2', 
		'\x189', '\x41', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18D', '\x5', 
		'\x44', '#', '\x2', '\x18B', '\x18C', '\a', 'O', '\x2', '\x2', '\x18C', 
		'\x18E', '\x5', '\x44', '#', '\x2', '\x18D', '\x18B', '\x3', '\x2', '\x2', 
		'\x2', '\x18D', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x197', 
		'\x3', '\x2', '\x2', '\x2', '\x18F', '\x190', '\a', '\x39', '\x2', '\x2', 
		'\x190', '\x193', '\x5', '\x44', '#', '\x2', '\x191', '\x192', '\a', 'O', 
		'\x2', '\x2', '\x192', '\x194', '\x5', '\x44', '#', '\x2', '\x193', '\x191', 
		'\x3', '\x2', '\x2', '\x2', '\x193', '\x194', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x196', '\x3', '\x2', '\x2', '\x2', '\x195', '\x18F', '\x3', 
		'\x2', '\x2', '\x2', '\x196', '\x199', '\x3', '\x2', '\x2', '\x2', '\x197', 
		'\x195', '\x3', '\x2', '\x2', '\x2', '\x197', '\x198', '\x3', '\x2', '\x2', 
		'\x2', '\x198', '\x43', '\x3', '\x2', '\x2', '\x2', '\x199', '\x197', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x19F', '\x5', '\x1A', '\xE', '\x2', 
		'\x19B', '\x19F', '\x5', '\x16', '\f', '\x2', '\x19C', '\x19F', '\a', 
		'W', '\x2', '\x2', '\x19D', '\x19F', '\x5', '\x46', '$', '\x2', '\x19E', 
		'\x19A', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19B', '\x3', '\x2', '\x2', 
		'\x2', '\x19E', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19D', 
		'\x3', '\x2', '\x2', '\x2', '\x19F', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x1A0', '\x1A1', '\a', '\t', '\x2', '\x2', '\x1A1', '\x1A4', '\a', '\x46', 
		'\x2', '\x2', '\x1A2', '\x1A5', '\x5', '\x1C', '\xF', '\x2', '\x1A3', 
		'\x1A5', '\x5', '\x16', '\f', '\x2', '\x1A4', '\x1A2', '\x3', '\x2', '\x2', 
		'\x2', '\x1A4', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', 
		'\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', '\a', 'G', '\x2', '\x2', 
		'\x1A7', 'G', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1AD', '\x5', '\x1A', 
		'\xE', '\x2', '\x1A9', '\x1AD', '\x5', '\x46', '$', '\x2', '\x1AA', '\x1AD', 
		'\a', 'W', '\x2', '\x2', '\x1AB', '\x1AD', '\a', '\x1C', '\x2', '\x2', 
		'\x1AC', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1A9', '\x3', 
		'\x2', '\x2', '\x2', '\x1AC', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AC', 
		'\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AD', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x1AE', '\x1B2', '\x5', 'L', '\'', '\x2', '\x1AF', '\x1B2', '\x5', 
		'N', '(', '\x2', '\x1B0', '\x1B2', '\x5', 'P', ')', '\x2', '\x1B1', '\x1AE', 
		'\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1AF', '\x3', '\x2', '\x2', '\x2', 
		'\x1B1', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B2', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x1B3', '\x1B4', '\a', ',', '\x2', '\x2', '\x1B4', '\x1B5', 
		'\x5', '\x4', '\x3', '\x2', '\x1B5', '\x1B6', '\a', '\r', '\x2', '\x2', 
		'\x1B6', '\x1B7', '\x5', '\"', '\x12', '\x2', '\x1B7', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x1B8', '\x1B9', '\a', '%', '\x2', '\x2', '\x1B9', '\x1BA', 
		'\x5', '\x38', '\x1D', '\x2', '\x1BA', '\x1BB', '\a', '*', '\x2', '\x2', 
		'\x1BB', '\x1BC', '\x5', '\x4', '\x3', '\x2', '\x1BC', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x1BD', '\x1BE', '\a', '\x13', '\x2', '\x2', '\x1BE', '\x1BF', 
		'\x5', '\x16', '\f', '\x2', '\x1BF', '\x1C0', '\a', '\x38', '\x2', '\x2', 
		'\x1C0', '\x1C1', '\x5', 'R', '*', '\x2', '\x1C1', '\x1C2', '\a', '\r', 
		'\x2', '\x2', '\x1C2', '\x1C3', '\x5', '\"', '\x12', '\x2', '\x1C3', '\x1CC', 
		'\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C5', '\a', '\x13', '\x2', '\x2', 
		'\x1C5', '\x1C6', '\x5', '\x16', '\f', '\x2', '\x1C6', '\x1C7', '\a', 
		'\x18', '\x2', '\x2', '\x1C7', '\x1C8', '\x5', '\x4', '\x3', '\x2', '\x1C8', 
		'\x1C9', '\a', '\r', '\x2', '\x2', '\x1C9', '\x1CA', '\x5', '\"', '\x12', 
		'\x2', '\x1CA', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1BD', 
		'\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1C4', '\x3', '\x2', '\x2', '\x2', 
		'\x1CC', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CE', '\x5', 'X', 
		'-', '\x2', '\x1CE', '\x1CF', '\t', '\x5', '\x2', '\x2', '\x1CF', '\x1D0', 
		'\x5', 'Z', '.', '\x2', '\x1D0', 'S', '\x3', '\x2', '\x2', '\x2', '\x1D1', 
		'\x1D2', '\a', '-', '\x2', '\x2', '\x1D2', '\x1D3', '\x5', 'V', ',', '\x2', 
		'\x1D3', '\x1D4', '\a', '\r', '\x2', '\x2', '\x1D4', '\x1D5', '\x5', '\"', 
		'\x12', '\x2', '\x1D5', 'U', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1DB', 
		'\x5', '\x34', '\x1B', '\x2', '\x1D7', '\x1D8', '\a', '\x39', '\x2', '\x2', 
		'\x1D8', '\x1DA', '\x5', '\x34', '\x1B', '\x2', '\x1D9', '\x1D7', '\x3', 
		'\x2', '\x2', '\x2', '\x1DA', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1DB', 
		'\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DC', '\x3', '\x2', '\x2', 
		'\x2', '\x1DC', 'W', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DB', '\x3', 
		'\x2', '\x2', '\x2', '\x1DE', '\x1DF', '\x5', '\x4', '\x3', '\x2', '\x1DF', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E1', '\x5', '\x4', '\x3', 
		'\x2', '\x1E1', '[', '\x3', '\x2', '\x2', '\x2', '\x41', '\x61', '\x64', 
		'g', 'j', 'm', 'p', 's', 'u', 'z', '\x7F', '\x82', '\x85', '\x87', '\x8C', 
		'\x90', '\x94', '\x97', '\x9A', '\x9D', '\xA0', '\xA2', '\xA5', '\xAA', 
		'\xB7', '\xBF', '\xC2', '\xCB', '\xCE', '\xD1', '\xD6', '\xDA', '\xDE', 
		'\xE7', '\xED', '\xF3', '\xF7', '\x100', '\x109', '\x10D', '\x113', '\x121', 
		'\x129', '\x131', '\x13E', '\x149', '\x151', '\x153', '\x15C', '\x163', 
		'\x168', '\x170', '\x17A', '\x17E', '\x182', '\x18D', '\x193', '\x197', 
		'\x19E', '\x1A4', '\x1AC', '\x1B1', '\x1CB', '\x1DB',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace JetBrains.ReSharper.Plugins.Spring
